use std::collections::HashMap;

pub fn op_code_names() -> HashMap<u8, &'static str> {
    let mut op_code_names = HashMap::new();
    op_code_names.insert(0, "OP_0");
    op_code_names.insert(79, "OP_1NEGATE");
    op_code_names.insert(81, "OP_1");
    op_code_names.insert(82, "OP_2");
    op_code_names.insert(83, "OP_3");
    op_code_names.insert(84, "OP_4");
    op_code_names.insert(85, "OP_5");
    op_code_names.insert(86, "OP_6");
    op_code_names.insert(87, "OP_7");
    op_code_names.insert(88, "OP_8");
    op_code_names.insert(89, "OP_9");
    op_code_names.insert(90, "OP_10");
    op_code_names.insert(91, "OP_11");
    op_code_names.insert(92, "OP_12");
    op_code_names.insert(93, "OP_13");
    op_code_names.insert(94, "OP_14");
    op_code_names.insert(95, "OP_15");
    op_code_names.insert(96, "OP_16");
    op_code_names.insert(97, "OP_NOP");
    op_code_names.insert(99, "OP_IF");
    op_code_names.insert(100, "OP_NOTIF");
    op_code_names.insert(105, "OP_VERIFY");
    op_code_names.insert(106, "OP_RETURN");
    op_code_names.insert(107, "OP_TOALTSTACK");
    op_code_names.insert(108, "OP_FROMALTSTACK");
    op_code_names.insert(109, "OP_2DROP");
    op_code_names.insert(110, "OP_2DUP");
    op_code_names.insert(111, "OP_3DUP");
    op_code_names.insert(112, "OP_2OVER");
    op_code_names.insert(113, "OP_2ROT");
    op_code_names.insert(114, "OP_2SWAP");
    op_code_names.insert(115, "OP_IFDUP");
    op_code_names.insert(116, "OP_DEPTH");
    op_code_names.insert(117, "OP_DROP");
    op_code_names.insert(118, "OP_DUP");
    op_code_names.insert(119, "OP_NIP");
    op_code_names.insert(120, "OP_OVER");
    op_code_names.insert(121, "OP_PICK");
    op_code_names.insert(122, "OP_ROLL");
    op_code_names.insert(123, "OP_ROT");
    op_code_names.insert(124, "OP_SWAP");
    op_code_names.insert(125, "OP_TUCK");
    op_code_names.insert(130, "OP_SIZE");
    op_code_names.insert(135, "OP_EQUAL");
    op_code_names.insert(136, "OP_EQUALVERIFY");
    op_code_names.insert(139, "OP_1ADD");
    op_code_names.insert(140, "OP_1SUB");
    op_code_names.insert(143, "OP_NEGATE");
    op_code_names.insert(144, "OP_ABS");
    op_code_names.insert(145, "OP_NOT");
    op_code_names.insert(146, "OP_0NOTEQUAL");
    op_code_names.insert(147, "OP_ADD");
    op_code_names.insert(148, "OP_SUB");
    op_code_names.insert(154, "OP_BOOLAND");
    op_code_names.insert(155, "OP_BOOLOR");
    op_code_names.insert(156, "OP_NUMEQUAL");
    op_code_names.insert(157, "OP_NUMEQUALVERIFY");
    op_code_names.insert(158, "OP_NUMNOTEQUAL");
    op_code_names.insert(159, "OP_LESSTHAN");
    op_code_names.insert(160, "OP_GREATERTHAN");
    op_code_names.insert(161, "OP_LESSTHANOREQUAL");
    op_code_names.insert(162, "OP_GREATERTHANOREQUAL");
    op_code_names.insert(163, "OP_MIN");
    op_code_names.insert(164, "OP_MAX");
    op_code_names.insert(165, "OP_WITHIN");
    op_code_names.insert(166, "OP_RIPEMD160");
    op_code_names.insert(167, "OP_SHA1");
    op_code_names.insert(168, "OP_SHA256");
    op_code_names.insert(169, "OP_HASH160");
    op_code_names.insert(170, "OP_HASH256");
    op_code_names.insert(172, "OP_CHECKSIG");
    op_code_names.insert(173, "OP_CHECKSIGVERIFY");
    op_code_names.insert(174, "OP_CHECKMULTISIG");
    op_code_names.insert(175, "OP_CHECKMULTISIGVERIFY");
    op_code_names.insert(177, "OP_CHECKLOCKTIMEVERIFY");
    op_code_names.insert(178, "OP_CHECKSEQUENCEVERIFY");
    op_code_names
}