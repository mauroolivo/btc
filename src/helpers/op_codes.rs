use std::collections::HashMap;

pub fn op_code_names() -> HashMap<u8, &'static str> {
    let mut op_code_names = HashMap::new();
    op_code_names.insert(OP_0, "OP_0");
    op_code_names.insert(OP_PUSHDATA1, "OP_PUSHDATA1");
    op_code_names.insert(OP_PUSHDATA2, "OP_PUSHDATA2");
    op_code_names.insert(OP_PUSHDATA4, "OP_PUSHDATA4");
    op_code_names.insert(OP_1NEGATE, "OP_NEGATE");
    op_code_names.insert(OP_1, "OP_1");
    op_code_names.insert(OP_2, "OP_2");
    op_code_names.insert(OP_3, "OP_3");
    op_code_names.insert(OP_4, "OP_4");
    op_code_names.insert(OP_5, "OP_5");
    op_code_names.insert(OP_6, "OP_6");
    op_code_names.insert(OP_7, "OP_7");
    op_code_names.insert(OP_8, "OP_8");
    op_code_names.insert(OP_9, "OP_9");
    op_code_names.insert(OP_10, "OP_10");
    op_code_names.insert(OP_11, "OP_11");
    op_code_names.insert(OP_12, "OP_12");
    op_code_names.insert(OP_13, "OP_13");
    op_code_names.insert(OP_14, "OP_14");
    op_code_names.insert(OP_15, "OP_15");
    op_code_names.insert(OP_16, "OP_16");
    op_code_names.insert(OP_NOP, "OP_NOP");
    op_code_names.insert(OP_IF, "OP_IF");
    op_code_names.insert(OP_NOTIF, "OP_NOTIF");
    op_code_names.insert(OP_ELSE, "OP_ELSE");
    op_code_names.insert(OP_ENDIF, "OP_ENDIF");
    op_code_names.insert(OP_VERIFY, "OP_VERIFY");
    op_code_names.insert(OP_RETURN, "OP_RETURN");
    op_code_names.insert(OP_TOALTSTACK, "OP_TOALTSTACK");
    op_code_names.insert(OP_FROMALTSTACK, "OP_FROMALTSTACK");
    op_code_names.insert(OP_2DROP, "OP_2DROP");
    op_code_names.insert(OP_2DUP, "OP_2DUP");
    op_code_names.insert(OP_3DUP, "OP_3DUP");
    op_code_names.insert(OP_2OVER, "OP_2OVER");
    op_code_names.insert(OP_2ROT, "OP_2ROT");
    op_code_names.insert(OP_2SWAP, "OP_2SWAP");
    op_code_names.insert(OP_IFDUP, "OP_IFDUP");
    op_code_names.insert(OP_DEPTH, "OP_DEPTH");
    op_code_names.insert(OP_DROP, "OP_DROP");
    op_code_names.insert(OP_DUP, "OP_DUP");
    op_code_names.insert(OP_NIP, "OP_NIP");
    op_code_names.insert(OP_OVER, "OP_OVER");
    op_code_names.insert(OP_PICK, "OP_PICK");
    op_code_names.insert(OP_ROLL, "OP_ROLL");
    op_code_names.insert(OP_ROT, "OP_ROT");
    op_code_names.insert(OP_SWAP, "OP_SWAP");
    op_code_names.insert(OP_TUCK, "OP_TUCK");
    op_code_names.insert(OP_SIZE, "OP_SIZE");
    op_code_names.insert(OP_EQUAL, "OP_EQUAL");
    op_code_names.insert(OP_EQUALVERIFY, "OP_EQUALVERIFY");
    op_code_names.insert(OP_1ADD, "OP_1ADD");
    op_code_names.insert(OP_1SUB, "OP_1SUB");
    op_code_names.insert(OP_NEGATE, "OP_NEGATE");
    op_code_names.insert(OP_ABS, "OP_ABS");
    op_code_names.insert(OP_NOT, "OP_NOT");
    op_code_names.insert(OP_0NOTEQUAL, "OP_0NOTEQUAL");
    op_code_names.insert(OP_ADD, "OP_ADD");
    op_code_names.insert(OP_SUB, "OP_SUB");
    op_code_names.insert(OP_MUL, "OP_MUL");
    op_code_names.insert(OP_BOOLAND, "OP_BOOLAND");
    op_code_names.insert(OP_BOOLOR, "OP_BOOLOR");
    op_code_names.insert(OP_NUMEQUAL, "OP_NUMEQUAL");
    op_code_names.insert(OP_NUMEQUALVERIFY, "OP_NUMEQUALVERIFY");
    op_code_names.insert(OP_NUMNOTEQUAL, "OP_NUMNOTEQUAL");
    op_code_names.insert(OP_LESSTHAN, "OP_LESSTHAN");
    op_code_names.insert(OP_GREATERTHAN, "OP_GREATERTHAN");
    op_code_names.insert(OP_GREATERTHANOREQUAL, "OP_GREATERTHANOREQUAL");
    op_code_names.insert(OP_MIN, "OP_MIN");
    op_code_names.insert(OP_MAX, "OP_MAX");
    op_code_names.insert(OP_WITHIN, "OP_WITHIN");
    op_code_names.insert(OP_RIPEMD160, "OP_RIPEMD160");
    op_code_names.insert(OP_SHA1, "OP_SHA1");
    op_code_names.insert(OP_SHA256, "OP_SHA256");
    op_code_names.insert(OP_HASH160, "OP_HASH160");
    op_code_names.insert(OP_HASH256, "OP_HASH256");
    op_code_names.insert(OP_CODESEPARATOR, "OP_CODESEPARATOR");
    op_code_names.insert(OP_CHECKSIG, "OP_CHECKSIG");
    op_code_names.insert(OP_CHECKSIGVERIFY, "OP_CHECKSIGVERIFY");

    op_code_names
}
pub const OP_0: u8 = 0;
pub const OP_PUSHDATA1: u8 = 76;
pub const OP_PUSHDATA2: u8 = 77;
pub const OP_PUSHDATA4: u8 = 78;
pub const OP_1NEGATE: u8 = 79;
pub const OP_1: u8 = 81;
pub const OP_2: u8 = 82;
pub const OP_3: u8 = 83;
pub const OP_4: u8 = 84;
pub const OP_5: u8 = 85;
pub const OP_6: u8 = 86;
pub const OP_7: u8 = 87;
pub const OP_8: u8 = 88;
pub const OP_9: u8 = 89;
pub const OP_10: u8 = 90;
pub const OP_11: u8 = 91;
pub const OP_12: u8 = 92;
pub const OP_13: u8 = 93;
pub const OP_14: u8 = 94;
pub const OP_15: u8 = 95;
pub const OP_16: u8 = 96;
pub const OP_NOP: u8 = 97;
pub const OP_IF: u8 = 99;
pub const OP_NOTIF: u8 = 100;
pub const OP_ELSE: u8 = 103;
pub const OP_ENDIF: u8 = 104;
pub const OP_VERIFY: u8 = 105;
pub const OP_RETURN: u8 = 106;
pub const OP_TOALTSTACK: u8 = 107;
pub const OP_FROMALTSTACK: u8 = 108;
pub const OP_2DROP: u8 = 109;
pub const OP_2DUP: u8 = 110;
pub const OP_3DUP: u8 = 111;
pub const OP_2OVER: u8 = 112;
pub const OP_2ROT: u8 = 113;
pub const OP_2SWAP: u8 = 114;
pub const OP_IFDUP: u8 = 115;
pub const OP_DEPTH: u8 = 116;
pub const OP_DROP: u8 = 117;
pub const OP_DUP: u8 = 118;
pub const OP_NIP: u8 = 119;
pub const OP_OVER: u8 = 120;
pub const OP_PICK: u8 = 121;
pub const OP_ROLL: u8 = 122;
pub const OP_ROT: u8 = 123;
pub const OP_SWAP: u8 = 124;
pub const OP_TUCK: u8 = 125;
pub const OP_SIZE: u8 = 130;
pub const OP_EQUAL: u8 = 135;
pub const OP_EQUALVERIFY: u8 = 136;
pub const OP_1ADD: u8 = 139;
pub const OP_1SUB: u8 = 140;
pub const OP_NEGATE: u8 = 143;
pub const OP_ABS: u8 = 144;
pub const OP_NOT: u8 = 145;
pub const OP_0NOTEQUAL: u8 = 146;
pub const OP_ADD: u8 = 147;
pub const OP_SUB: u8 = 148;
pub(crate) const OP_MUL: u8 = 149;
pub const OP_BOOLAND: u8 = 154;
pub const OP_BOOLOR: u8 = 155;
pub const OP_NUMEQUAL: u8 = 156;
pub const OP_NUMEQUALVERIFY: u8 = 157;
pub const OP_NUMNOTEQUAL: u8 = 158;
pub const OP_LESSTHAN: u8 = 159;
pub const OP_GREATERTHAN: u8 = 160;
pub const OP_LESSTHANOREQUAL: u8 = 161;
pub const OP_GREATERTHANOREQUAL: u8 = 162;
pub const OP_MIN: u8 = 163;
pub const OP_MAX: u8 = 164;
pub const OP_WITHIN: u8 = 165;
pub const OP_RIPEMD160: u8 = 166;
pub const OP_SHA1: u8 = 167;
pub const OP_SHA256: u8 = 168;
pub const OP_HASH160: u8 = 169;
pub const OP_HASH256: u8 = 170;
pub const OP_CODESEPARATOR: u8 = 171;
pub const OP_CHECKSIG: u8 = 172;
pub const OP_CHECKSIGVERIFY: u8 = 173;
pub const OP_CHECKMULTISIG: u8 = 174;
pub const OP_CHECKMULTISIGVERIFY: u8 = 175;
pub(crate) const OP_NOP1: u8 = 176;
pub const OP_CHECKLOCKTIMEVERIFY: u8 = 177;
pub const OP_CHECKSEQUENCEVERIFY: u8 = 178;
pub(crate) const OP_NOP4: u8 = 179;
pub(crate) const OP_NOP5: u8 = 180;
pub(crate) const OP_NOP6: u8 = 181;
pub(crate) const OP_NOP7: u8 = 182;
pub(crate) const OP_NOP8: u8 = 183;
pub(crate) const OP_NOP9: u8 = 184;
pub(crate) const OP_NOP10: u8 = 185;